// src/client/overlay.ts
function _assert_this_initialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _construct(Parent, args, Class) {
    if (_is_native_reflect_construct()) {
        _construct = Reflect.construct;
    } else {
        _construct = function construct(Parent, args, Class) {
            var a = [
                null
            ];
            a.push.apply(a, args);
            var Constructor = Function.bind.apply(Parent, a);
            var instance = new Constructor();
            if (Class) _set_prototype_of(instance, Class.prototype);
            return instance;
        };
    }
    return _construct.apply(null, arguments);
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _get_prototype_of(o) {
    _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _get_prototype_of(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _set_prototype_of(subClass, superClass);
}
function _is_native_function(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _possible_constructor_return(self, call) {
    if (call && (_type_of(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assert_this_initialized(self);
}
function _set_prototype_of(o, p) {
    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _set_prototype_of(o, p);
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _wrap_native_super(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;
    _wrap_native_super = function wrapNativeSuper(Class) {
        if (Class === null || !_is_native_function(Class)) return Class;
        if (typeof Class !== "function") {
            throw new TypeError("Super expression must either be null or a function");
        }
        if (typeof _cache !== "undefined") {
            if (_cache.has(Class)) return _cache.get(Class);
            _cache.set(Class, Wrapper);
        }
        function Wrapper() {
            return _construct(Class, arguments, _get_prototype_of(this).constructor);
        }
        Wrapper.prototype = Object.create(Class.prototype, {
            constructor: {
                value: Wrapper,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        return _set_prototype_of(Wrapper, Class);
    };
    return _wrap_native_super(Class);
}
function _is_native_reflect_construct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _create_super(Derived) {
    var hasNativeReflectConstruct = _is_native_reflect_construct();
    return function _createSuperInternal() {
        var Super = _get_prototype_of(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _get_prototype_of(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possible_constructor_return(this, result);
    };
}
import { registerOverlay } from "./hmr";
function stripAnsi(content) {
    var pattern = [
        "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
        "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"
    ].join("|");
    var regex = new RegExp(pattern, "g");
    return content.replace(regex, "");
}
function linkedText(root, selector, text) {
    var _loop = function() {
        var file = match[0], index = match.index;
        if (index != null) {
            var frag2 = text.slice(curIndex, index);
            el.appendChild(document.createTextNode(frag2));
            var link = document.createElement("a");
            link.textContent = file;
            link.className = "file-link";
            link.onclick = function() {
                fetch("/__open-in-editor?file=".concat(encodeURIComponent(file)));
            };
            el.appendChild(link);
            curIndex += frag2.length + file.length;
        }
        match = fileRegex.exec(text);
    };
    var el = root.querySelector(selector);
    var fileRegex = /(?:[a-zA-Z]:\\|\/).*?:\d+:\d+/g;
    var curIndex = 0;
    var match = fileRegex.exec(text);
    while(match !== null)_loop();
    var frag = text.slice(curIndex);
    el.appendChild(document.createTextNode(frag));
}
var overlayTemplate = '\n<style>\n.root {\n  position: fixed;\n  z-index: 9999;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  overflow-y: scroll;\n  margin: 0;\n  background: rgba(0, 0, 0, 0.66);\n  cursor: pointer;\n}\n.container {\n  font-family: Menlo, Consolas, monospace;\n  line-height: 1.6;\n  width: 800px;\n  max-width: 85%;\n  color: #d8d8d8;\n  margin: 32px auto;\n  padding: 32px 40px;\n  position: relative;\n  background: #181818;\n  border-radius: 24px;\n  box-shadow: 0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);\n  overflow: hidden;\n  direction: ltr;\n  text-align: left;\n  box-sizing: border-box;\n  cursor: default;\n}\n.title {\n  margin: 0 0 20px;\n  padding-bottom: 12px;\n  font-size: 17px;\n  font-weight: 600;\n  color: #fc5e5e;\n  border-bottom: 2px solid rgba(252,94,94,.66);\n}\n.content {\n  margin: 0;\n  font-size: 14px;\n  font-family: inherit;\n  overflow-x: scroll;\n  scrollbar-width: none;\n  color: #b8b8b8;\n}\n.content::-webkit-scrollbar {\n  display: none;\n}\n.file-link {\n  cursor: pointer;\n  color: #27caca;\n  text-decoration: underline;\n  &:hover {\n    opacity: 0.8;\n  }\n  &:active {\n    opacity: 0.6;\n  }\n}\n.close {\n  position: absolute;\n  top: 27px;\n  right: 32px;\n  width: 32px;\n  height: 32px;\n  cursor: pointer;\n}\n.close:hover {\n  opacity: 0.8;\n}\n.close:active {\n  opacity: 0.6;\n}\n.close:before,\n.close:after {\n  position: absolute;\n  left: 16px;\n  top: 8px;\n  content: \' \';\n  height: 18px;\n  width: 2px;\n  border-radius: 4px;\n  background-color: #b8b8b8;\n}\n.close:before {\n  transform: rotate(45deg);\n}\n.close:after {\n  transform: rotate(-45deg);\n}\n.footer {\n  font-size: 12px;\n  color: #7e6a92;\n  margin-top: 20px;\n  padding-top: 12px;\n  border-top: 2px solid rgba(126,106,146,.6);\n}\n.footer p {\n  margin: 4px 0 0;\n}\n.footer span {\n  color: #a88dc3;\n}\n</style>\n\n<div class="root">\n  <div class="container">\n    <div class="close"></div>\n    <p class="title">Compilation failed</p>\n    <pre class="content"></pre>\n    <footer class="footer">\n      <p><span>Fix error</span>, click outside, or press Esc to close the overlay.</p>\n      <p>Disable overlay by setting Rsbuild\'s <span>dev.client.overlay</span> config to false.<p>\n    </footer>\n  </div>\n</div>\n';
var _ref = typeof window !== "undefined" ? window : globalThis, _ref_HTMLElement = _ref.HTMLElement, HTMLElement = _ref_HTMLElement === void 0 ? function HTMLElement() {
    "use strict";
    _class_call_check(this, HTMLElement);
} : _ref_HTMLElement, customElements = _ref.customElements;
var ErrorOverlay = /*#__PURE__*/ function(HTMLElement) {
    "use strict";
    _inherits(ErrorOverlay, HTMLElement);
    var _super = _create_super(ErrorOverlay);
    function ErrorOverlay(message) {
        _class_call_check(this, ErrorOverlay);
        var _this;
        var _root_querySelector;
        _this = _super.call(this);
        _define_property(_assert_this_initialized(_this), "close", function() {
            var remove = function() {
                var _this_parentNode;
                return (_this_parentNode = _this.parentNode) === null || _this_parentNode === void 0 ? void 0 : _this_parentNode.removeChild(_assert_this_initialized(_this));
            };
            if (_this.animate) {
                _this.animate([
                    {
                        opacity: 1
                    },
                    {
                        opacity: 0
                    }
                ], {
                    duration: 300,
                    easing: "ease-out"
                }).addEventListener("finish", remove);
            } else {
                remove();
            }
        });
        if (!_this.attachShadow) {
            console.warn("[Rsbuild] Current browser version does not support displaying error overlay");
            return _possible_constructor_return(_this);
        }
        var root = _this.attachShadow({
            mode: "open"
        });
        root.innerHTML = overlayTemplate;
        linkedText(root, ".content", stripAnsi(message.join("/n")).trim());
        (_root_querySelector = root.querySelector(".close")) === null || _root_querySelector === void 0 ? void 0 : _root_querySelector.addEventListener("click", _this.close);
        _this.addEventListener("click", _this.close);
        root.querySelector(".container").addEventListener("click", function(e) {
            e.stopPropagation();
        });
        var onEscKeydown = function(e) {
            if (e.key === "Escape" || e.code === "Escape") {
                _this.close();
            }
            document.removeEventListener("keydown", onEscKeydown);
        };
        document.addEventListener("keydown", onEscKeydown);
        return _this;
    }
    return ErrorOverlay;
}(_wrap_native_super(HTMLElement));
var overlayId = "rsbuild-error-overlay";
if (customElements && !customElements.get(overlayId)) {
    customElements.define(overlayId, ErrorOverlay);
}
function createOverlay(err) {
    clearOverlay();
    document.body.appendChild(new ErrorOverlay(err));
}
function clearOverlay() {
    document.querySelectorAll(overlayId).forEach(function(n) {
        return n.close();
    });
}
if (typeof document !== "undefined") {
    registerOverlay(createOverlay, clearOverlay);
} else {
    console.info("[Rsbuild] Failed to display error overlay as document is not available, you can disable the `dev.client.overlay` option.");
}
